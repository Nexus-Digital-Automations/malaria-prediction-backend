#!/usr/bin/env bash
# ensure-setup.sh - Lightweight setup verification for post-tool feedback
#
# SYNOPSIS
#   ./ensure-setup.sh [project_dir]
#
# DESCRIPTION
#   Ensures minimal setup is present for post-tool feedback to work correctly.
#   Only creates missing essential files - NEVER overwrites existing files.
#   Designed to be called from post-tool hooks without disrupting workflow.
#   
#   If critical setup is missing and we're in Claude Coding Projects directory,
#   will attempt to run the full setup script automatically.

set +e  # Don't exit on errors - we want graceful handling

# Get the project directory (default to current)
PROJECT_DIR="${1:-$PWD}"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Check if we need to run full setup
need_full_setup() {
    local project_dir="$PROJECT_DIR"
    
    # Check for essential missing components
    if [[ ! -f "$project_dir/hooks/common-helpers.sh" ]] ||
       [[ ! -f "$project_dir/hooks/lint-results-generator.sh" ]] ||
       [[ ! -f "$project_dir/hooks/smart-lint.sh" ]] ||
       [[ ! -d "$project_dir/development" ]]; then
        return 0  # Full setup needed
    fi
    
    return 1  # Minimal setup is sufficient
}

# Minimal setup - only create what's absolutely necessary
ensure_minimal_setup() {
    local project_dir="$PROJECT_DIR"
    
    # Ensure development/reports directory exists
    local reports_dir="$project_dir/development/reports"
    if [[ ! -d "$reports_dir" ]]; then
        mkdir -p "$reports_dir" 2>/dev/null || return 0
    fi
    
    # Ensure lint-results.md exists (needed for feedback links)
    local lint_results="$reports_dir/lint-results.md"
    if [[ ! -f "$lint_results" ]]; then
        cat > "$lint_results" 2>/dev/null << 'EOF' || return 0
# Lint Results

This file will be populated when lint checks run.

---
*Auto-generated by post-tool feedback system*
EOF
    fi
    
    # Ensure essential hook files exist in current project
    local hooks_dir="$project_dir/hooks"
    if [[ ! -d "$hooks_dir" ]] && [[ -d "$SCRIPT_DIR" ]]; then
        mkdir -p "$hooks_dir" 2>/dev/null || return 0
        
        # Copy only the essential files needed for post-tool feedback
        local essential_files=(
            "lint-results-generator.sh"
            "common-helpers.sh"
        )
        
        for file in "${essential_files[@]}"; do
            if [[ -f "$SCRIPT_DIR/$file" ]] && [[ ! -f "$hooks_dir/$file" ]]; then
                cp "$SCRIPT_DIR/$file" "$hooks_dir/" 2>/dev/null || continue
                chmod +x "$hooks_dir/$file" 2>/dev/null || continue
            fi
        done
    fi
    
    return 0  # Always succeed - don't break the workflow
}

# Auto-setup function when critical components are missing
run_full_auto_setup() {
    local project_dir="$PROJECT_DIR"
    local claude_projects_root="/Users/jeremyparker/Desktop/Claude Coding Projects"
    
    # Check if we're in a project within the Claude Coding Projects directory
    if [[ "$project_dir" == "$claude_projects_root"/* ]]; then
        # Look for setup script in the post-tool-stop-hook project
        local setup_script="$claude_projects_root/post-tool-stop-hook/setup-post-tool-feedback-all.sh"
        
        if [[ -f "$setup_script" ]]; then
            echo "🔧 Critical setup missing. Running auto-setup..." >&2
            
            # Run the setup script
            if bash "$setup_script" >/dev/null 2>&1; then
                echo "✅ Auto-setup completed successfully" >&2
                return 0
            else
                echo "❌ Auto-setup failed" >&2
                return 1
            fi
        fi
    fi
    
    return 1  # Auto-setup not available
}

# Check if we need full setup first
if need_full_setup; then
    # Try auto-setup if we're in Claude Coding Projects
    if run_full_auto_setup; then
        # Auto-setup completed, ensure minimal setup is still run
        ensure_minimal_setup
    else
        # Auto-setup failed or not available, try minimal setup
        ensure_minimal_setup
    fi
else
    # Just run minimal setup
    ensure_minimal_setup
fi

# Exit cleanly
exit 0