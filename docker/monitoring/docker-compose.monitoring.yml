version: '3.8'

# Enhanced Monitoring Stack for Malaria Prediction Backend
# Provides comprehensive monitoring, alerting, and observability

networks:
  monitoring-network:
    driver: bridge
    external: false
  malaria-network:
    external: true

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  jaeger-data:
    driver: local
  loki-data:
    driver: local

services:
  # =============================================================================
  # Prometheus - Metrics Collection and Storage
  # =============================================================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: malaria-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
    networks:
      - monitoring-network
      - malaria-network
    environment:
      - PROMETHEUS_RETENTION_TIME=30d
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    labels:
      - "monitoring.component=prometheus"
      - "monitoring.description=Metrics collection and storage"

  # =============================================================================
  # Grafana - Visualization and Dashboards
  # =============================================================================
  grafana:
    image: grafana/grafana:10.0.0
    container_name: malaria-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/plugins:/var/lib/grafana/plugins
    environment:
      # Security
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_DEFAULT_THEME=dark

      # Features
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel

      # Alerting
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=true

      # Analytics
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false

      # Logging
      - GF_LOG_LEVEL=info

      # Performance
      - GF_DATABASE_MAX_OPEN_CONN=100
      - GF_DATABASE_MAX_IDLE_CONN=100
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    labels:
      - "monitoring.component=grafana"
      - "monitoring.description=Visualization and dashboards"

  # =============================================================================
  # Alertmanager - Alert Management and Routing
  # =============================================================================
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: malaria-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--log.level=info'
    ports:
      - "9093:9093"
    volumes:
      - alertmanager-data:/alertmanager
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - monitoring-network
    environment:
      - ALERTMANAGER_WEB_EXTERNAL_URL=http://localhost:9093
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    labels:
      - "monitoring.component=alertmanager"
      - "monitoring.description=Alert management and routing"

  # =============================================================================
  # Jaeger - Distributed Tracing
  # =============================================================================
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: malaria-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    volumes:
      - jaeger-data:/tmp
    networks:
      - monitoring-network
      - malaria-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    labels:
      - "monitoring.component=jaeger"
      - "monitoring.description=Distributed tracing"

  # =============================================================================
  # Loki - Log Aggregation
  # =============================================================================
  loki:
    image: grafana/loki:2.8.0
    container_name: malaria-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/loki.yml
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ./loki/loki.yml:/etc/loki/loki.yml:ro
    networks:
      - monitoring-network
      - malaria-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    labels:
      - "monitoring.component=loki"
      - "monitoring.description=Log aggregation"

  # =============================================================================
  # Promtail - Log Collection Agent
  # =============================================================================
  promtail:
    image: grafana/promtail:2.8.0
    container_name: malaria-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/promtail.yml
    volumes:
      - ./promtail/promtail.yml:/etc/promtail/promtail.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - monitoring-network
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'
    labels:
      - "monitoring.component=promtail"
      - "monitoring.description=Log collection agent"

  # =============================================================================
  # Node Exporter - System Metrics
  # =============================================================================
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: malaria-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'
    labels:
      - "monitoring.component=node-exporter"
      - "monitoring.description=System metrics collection"

  # =============================================================================
  # cAdvisor - Container Metrics
  # =============================================================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: malaria-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring-network
    privileged: true
    devices:
      - /dev/kmsg
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.1'
    labels:
      - "monitoring.component=cadvisor"
      - "monitoring.description=Container metrics collection"

  # =============================================================================
  # Redis Exporter - Redis Metrics
  # =============================================================================
  redis-exporter:
    image: oliver006/redis_exporter:v1.50.0
    container_name: malaria-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    networks:
      - monitoring-network
      - malaria-network
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
    labels:
      - "monitoring.component=redis-exporter"
      - "monitoring.description=Redis metrics collection"

  # =============================================================================
  # Postgres Exporter - Database Metrics
  # =============================================================================
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.12.0
    container_name: malaria-postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://malaria_user:$(cat /run/secrets/db_password)@database:5432/malaria_prediction?sslmode=disable
    networks:
      - monitoring-network
      - malaria-network
    secrets:
      - db_password
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
    labels:
      - "monitoring.component=postgres-exporter"
      - "monitoring.description=PostgreSQL metrics collection"

secrets:
  db_password:
    external: true
  redis_password:
    external: true
