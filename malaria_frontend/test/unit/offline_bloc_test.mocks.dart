// Mocks generated by Mockito 5.4.4 from annotations
// in malaria_frontend/test/unit/offline_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:connectivity_plus/connectivity_plus.dart' as _i3;
import 'package:logger/logger.dart' as _i2;
import 'package:malaria_frontend/core/cache/offline_cache_service.dart' as _i6;
import 'package:malaria_frontend/core/models/models.dart' as _i7;
import 'package:malaria_frontend/core/network/network_info.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectivity_1 extends _i1.SmartFake implements _i3.Connectivity {
  _FakeConnectivity_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i4.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i3.ConnectivityResult> get connectionType => (super.noSuchMethod(
        Invocation.getter(#connectionType),
        returnValue: _i5.Future<_i3.ConnectivityResult>.value(
            _i3.ConnectivityResult.bluetooth),
      ) as _i5.Future<_i3.ConnectivityResult>);

  @override
  _i5.Stream<_i3.ConnectivityResult> get connectivityStream =>
      (super.noSuchMethod(
        Invocation.getter(#connectivityStream),
        returnValue: _i5.Stream<_i3.ConnectivityResult>.empty(),
      ) as _i5.Stream<_i3.ConnectivityResult>);
}

/// A class which mocks [OfflineCacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfflineCacheService extends _i1.Mock
    implements _i6.OfflineCacheService {
  MockOfflineCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.Logger);

  @override
  _i3.Connectivity get connectivity => (super.noSuchMethod(
        Invocation.getter(#connectivity),
        returnValue: _FakeConnectivity_1(
          this,
          Invocation.getter(#connectivity),
        ),
      ) as _i3.Connectivity);

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> store({
    required String? key,
    required Map<String, dynamic>? data,
    Duration? ttl,
    _i6.CachePriority? priority = _i6.CachePriority.normal,
    List<String>? tags = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [],
          {
            #key: key,
            #data: data,
            #ttl: ttl,
            #priority: priority,
            #tags: tags,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<Map<String, dynamic>?> retrieve(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieve,
          [key],
        ),
        returnValue: _i5.Future<Map<String, dynamic>?>.value(),
      ) as _i5.Future<Map<String, dynamic>?>);

  @override
  _i5.Future<bool> has(String? key) => (super.noSuchMethod(
        Invocation.method(
          #has,
          [key],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> clearByTags(List<String>? tags) => (super.noSuchMethod(
        Invocation.method(
          #clearByTags,
          [tags],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> clearExpired() => (super.noSuchMethod(
        Invocation.method(
          #clearExpired,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<Map<String, dynamic>> getStats() => (super.noSuchMethod(
        Invocation.method(
          #getStats,
          [],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<bool> isNetworkAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isNetworkAvailable,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> cachePrediction({
    required String? locationKey,
    required _i7.PredictionResult? prediction,
    Duration? ttl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cachePrediction,
          [],
          {
            #locationKey: locationKey,
            #prediction: prediction,
            #ttl: ttl,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i7.PredictionResult?> getCachedPrediction(String? locationKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedPrediction,
          [locationKey],
        ),
        returnValue: _i5.Future<_i7.PredictionResult?>.value(),
      ) as _i5.Future<_i7.PredictionResult?>);

  @override
  _i5.Future<void> cacheMapData({
    required String? regionKey,
    required List<_i7.RiskData>? riskData,
    Duration? ttl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheMapData,
          [],
          {
            #regionKey: regionKey,
            #riskData: riskData,
            #ttl: ttl,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i7.RiskData>?> getCachedMapData(String? regionKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedMapData,
          [regionKey],
        ),
        returnValue: _i5.Future<List<_i7.RiskData>?>.value(),
      ) as _i5.Future<List<_i7.RiskData>?>);

  @override
  _i5.Future<void> cacheUserSettings(
          {required _i7.UserPreferences? preferences}) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheUserSettings,
          [],
          {#preferences: preferences},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i7.UserPreferences?> getCachedUserSettings() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedUserSettings,
          [],
        ),
        returnValue: _i5.Future<_i7.UserPreferences?>.value(),
      ) as _i5.Future<_i7.UserPreferences?>);

  @override
  _i5.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
